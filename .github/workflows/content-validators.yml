name: Content Validators (quick)

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'content/questions/**'
      - 'content/blueprints/**'
      - 'content/schema/**'
      - 'schemas/**'
      - 'content/explanations/**'
      - 'scripts/**'
  push:
    branches: [ main ]
    paths:
      - 'content/questions/**'
      - 'content/blueprints/**'
      - 'content/schema/**'
      - 'schemas/**'
      - 'content/explanations/**'
      - 'scripts/**'

jobs:
  content:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    concurrency:
      group: content-${{ github.ref }}
      cancel-in-progress: false
    strategy:
      fail-fast: false
      matrix:
        shard: [0, 1, 2, 3]
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Detect content-affecting changes
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          # 1) Определяем BASE/HEAD надёжно
          BASE_REF="${{ github.base_ref || 'main' }}"
          git fetch --no-tags --prune origin +refs/heads/${BASE_REF}:refs/remotes/origin/base
          BASE="$(git merge-base HEAD origin/base)"
          HEAD="$(git rev-parse HEAD)"
          echo "base=$BASE head=$HEAD"

          # 2) Безаварийно получаем список изменённых файлов
          #    (git diff может вернуть код !=0; нормализуем)
          CHANGED="$(git diff --name-only --diff-filter=ACMRD "$BASE...$HEAD" || true)"
          printf '%s\n' "$CHANGED" > changed.txt

          # 3) Выставляем гейты: blueprint/profile/any
          bp=false
          prof=false
          if grep -E '^content/blueprints/' changed.txt >/dev/null 2>&1; then bp=true; fi
          if grep -E '^content/exam_profiles/' changed.txt >/dev/null 2>&1; then prof=true; fi
          any=false
          if [ -s changed.txt ]; then any=true; fi

          {
            echo "blueprint=$bp"
            echo "exam_profile=$prof"
            echo "changed_any=$any"
          } >> "$GITHUB_OUTPUT"

      - name: Export PR SHAs
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "BASE_SHA=${{ github.event.pull_request.base.sha }}" >> $GITHUB_ENV
          echo "HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

      - name: Node 20
        uses: actions/setup-node@v4
        with: { node-version: '20' }

      - name: (Ephemeral) prepare Ajv (no workspace)
        if: ${{ matrix.shard == 0 }}
        shell: bash
        env:
          npm_config_loglevel: error
        run: |
          set -euo pipefail
          mkdir -p .ci-node
          npm install ajv ajv-formats \
            --no-save --no-audit --no-fund --no-package-lock \
            --prefix ./.ci-node
          node -e "console.log('ajv@'+require('./.ci-node/node_modules/ajv/package.json').version)"
          echo "NODE_PATH=${{ github.workspace }}/.ci-node/node_modules" >> $GITHUB_ENV

      - name: Verify Ajv modules
        if: ${{ matrix.shard == 0 }}
        run: node -e "require('ajv'); require('ajv-formats'); console.log('Ajv modules OK')"

      - name: Validate questions (changed-only)
        if: ${{ matrix.shard == 0 }}
        run: |
          bash scripts/validate-questions.sh --changed-only

      - name: Quotas (changed-only, exam)
        if: ${{ matrix.shard == 0 }}
        run: |
          bash scripts/check-quotas.sh --changed-only --profile content/exam_profiles/welder_exam_2024.json --locales en,ru --mode min --min-multiple 1 --allow-extra

      - name: Upload validation logs
        if: ${{ matrix.shard == 0 && hashFiles('logs/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: content-validation-logs
          path: logs

      - name: Upload question bank dist
        if: ${{ matrix.shard == 0 && hashFiles('dist/questions/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: question-bank-dist
          path: dist/questions

      - name: Plagiarism (full, sharded)
        if: ${{ steps.diff.outputs.blueprint == 'true' || steps.diff.outputs.exam_profile == 'true' }}
        env:
          SHARD_INDEX: ${{ matrix.shard }}
          SHARD_COUNT: 4
        run: |
          node scripts/check-plagiarism.mjs \
            --locales en,ru \
            --shard-index "$SHARD_INDEX" --shard-count "$SHARD_COUNT" \
            --progress 20000 \
            --time-budget 3300 \
            --soft-fail \
            --out "plag-shard-${SHARD_INDEX}.json"

      - name: Upload plagiarism shard
        if: ${{ (steps.diff.outputs.blueprint == 'true' || steps.diff.outputs.exam_profile == 'true') && hashFiles('plag-shard-*.json') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: plag-shard-${{ matrix.shard }}
          path: plag-shard-${{ matrix.shard }}.json
          if-no-files-found: ignore

  aggregate:
    needs: [content]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: ./plag
          merge-multiple: true
          if-no-files-found: ignore
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Merge plagiarism results
        if: ${{ hashFiles('plag/**/*.json') != '' }}
        run: node scripts/plagiarism-aggregate.mjs ./plag
      - name: Upload merged report
        if: ${{ hashFiles('plag-merged.json') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: plag-merged
          path: plag-merged.json
